I"p2<p>The first thing we’re going to do is download and install <strong>Atom</strong>, my favorite text editor for working directly with GitHub. It’s got Git built into it and will sync easily with your GitHub account.</p>

<h2 id="to-be-done-before-class-on-wednesday-march-31">To be done before class on Wednesday, March 31:</h2>

<ol>
  <li>Go to <a href="https://atom.io">atom.io</a>. Click Download.</li>
  <li>Once Atom is downloaded, double click to unzip the file. If you’re on a Mac, you’ll need to open your Downloads folder and move Atom into your Applications folder.</li>
  <li>Open the application by double clicking it.</li>
  <li>If you don’t already have developer command line tools installed on your computer, you may see a dialogue box pop up that says: “The ‘git’ command requires the command line developer tools. Would you like to install the tools now?”</li>
  <li>Click Install and agree to the licensing terms to Install XCode. Click Install, not Get XCode, if that’s an option you see.</li>
  <li>When you open Atom, you’ll see a menu at the bottom right. Click GitHub. You’ll be asked to go to github.com to sign in and get a code to link Atom with your account.</li>
</ol>

<p>Great, you’ve got Atom! We’ll work in Atom in class on Wednesday, so you’re all set for now.</p>

<h2 id="to-work-through-in-class-on-wednesday-march-31">To work through in class on Wednesday, March 31:</h2>

<p>Now we’re going to head over to GitHub, to the <a href="https:://github.com/HUM-331-Princeton">HUM-331-Princeton repository</a>. You’ll see a new repository in the organization: <strong>HUM-331-Princeton/final-project-template</strong>.</p>

<p>I created this template for you all to use for your final project, but it’s really just a copy of a pretty popular (and really user-friendly) Jekyll template known as Jekyll Now that I’ve customized with a sidebar navigation and a contributors template. It is a very basic website that you can customize with extra HTML or CSS if you’d like, but it also functions really simply right out of the gate.</p>

<ol>
  <li>Open the repository final-project-template.</li>
  <li>If you’re working with a classmate as a pair for your final project, <em>just one of you</em> should click Use this template to create a new repository based on exactly these files.</li>
  <li>Be sure to select HUM-331-Princeton as the owner of the repository, not your personal account.</li>
  <li>Decide what you want to call the repository, and keep in mind that this will end up in the URL for your site, so pick something that conveys a bit about your project but keep it short—like no more than three words at most.</li>
  <li>Add a description that says something about the site and your project, and select Public.</li>
  <li>Navigate to <strong>Pages</strong> in the sidebar menu, and select <strong>main</strong> in the drop down menu. Keep the source as <strong>/(root)</strong> and click Save.</li>
  <li>In the left-hand menu, navigate to <strong>Manage Access</strong>. Whichever one of you created the new repository, invite the other member of your group by typing their GitHub account name into the box. Be sure to select <strong>Admin</strong> as that person’s privileges in the repository.</li>
  <li>In the left-hand menu, navigate to <strong>Notifications</strong> and enter your email addresses.</li>
  <li>Give it a few seconds (or maybe a minute or two) and direct your browser to HUM-331-Princeton.github.io/whatever-you-named-your-repository
You should see a bare bones demo site, ready for you to customize!</li>
</ol>

<p>Ok, you’ve created a site, that’s awesome!</p>

<p><strong>Now it’s time to put the files on your local computer so you can work on your final project without constantly clicking around GitHub. We’re going back to Atom.</strong></p>

<ol>
  <li>Open Atom and click the GitHub menu at the bottom right.</li>
  <li>You should see a menu option to “Clone an existing GitHub repository…”</li>
  <li>Click that option, and you’ll see a box pop up with a space for you to paste in the URL of your new repository.</li>
  <li>Go back to GitHub.com and copy the URL for your new repository. This is the GitHub URL not the URL for your new site. So it should be:
github.com/HUM-331-Princeton/whatever-you-named-your-project</li>
  <li>Now paste that address into the box and pay attention to where it’s getting saved in your computer. Atom will automatically create a file on your computer called github, but it won’t be in your Documents or Desktop unless you specify that location. If I wanted the folder to be in Documents, I would need to edit the path for the repository files to: Users/melissareynolds/Documents/github/whatever-you-named-your-site.</li>
  <li>Click Clone and you should see all the files from your new repository appear!</li>
</ol>

<h2 id="workflow-for-editing-on-your-repositories-in-atom">Workflow for editing on your repositories in Atom:</h2>

<p>The menu on the bottom right allows you to move between the Git and GitHub menus. Here’s the difference: the Git menu keeps track of all the changes you’ve made to your files, and that’s how you’ll push any changes you’ve made to the web repository. It’s a versioning tool, in computer science speak.
The GitHub menu shows you if there are any outstanding pull requests that need your attention.</p>

<p>Now let’s say that after working with your partner today to initially set up the site you want to make some changes to your files on your own time, but you don’t want to accidentally override the work of your partner and you don’t want it all online just yet. So, you’re going to create a new branch to work in.</p>

<p>When we established the settings for our new repository in GitHub, we set GitHub Pages to the main branch. That means we told GitHub to only publish whatever is in the main branch to the web. The files in other branches won’t show up online until they’re merged into the main branch.</p>

<p>At the bottom of Atom, you see a menu item called main to the left of <strong>Fetch</strong>: that’s the branch you’re working in.</p>
<ol>
  <li>Click <strong>main</strong>.</li>
  <li>Click <strong>New Branch</strong>, then title the new branch <strong>firstname-month-date</strong> so you can know whose is whose and so that you keep track of which branch is the latest.</li>
  <li>Click <strong>New Branch</strong> again to create the branch.</li>
</ol>

<p>Now you should see whatever you’ve titled your branch where main used to be in the bottom menu of Atom. That means you’re working in that branch, not main. Great!</p>

<h3 id="now-lets-make-some-changes-to-the-repository-files-from-within-this-branch-and-then-commit-them">Now let’s make some changes to the repository files from within this branch and then commit them.</h3>
<ol>
  <li>Let’s open the <strong>about.md</strong> file. Note that the formatting of the page is exactly the same as the blog posts you’ve been submitting, except that the layout is set to page not post, and there’s a permalink set since this is going to be a permanent page in the navigation.</li>
  <li>Go ahead and change some of the information in the file and key in <strong>Command+S</strong> if you’re on a Mac, or <strong>Control+S</strong> on Windows, to save the changes you made.
<strong>Bonus tip:</strong> At anytime as you’re composing your Markdown in Atom, you can key in <strong>Control+Shift+M</strong> to open a window that displays your Markdown as it will render on the web.</li>
  <li>After you make those changes, open the Git menu by clicking the word on the bottom right.</li>
  <li>You should see the name of the file, <strong>about.md</strong>, show up in the Git menu under <strong>Unstaged Changes</strong>. That means you’ve made changes to a file locally, but you haven’t yet staged them to be able to push them to the web.</li>
  <li>Click <strong>Stage All</strong> on the top right. The file name <strong>atom.md</strong> will now move down to the <strong>Staged Changes</strong> menu.</li>
  <li>Now, if you’re ready to commit these changes–and remember, these changes are only going to your branch, not to the main branch–type in a <strong>Commit message</strong> explaining what you’ve changed, and click <strong>Commit</strong>.</li>
  <li>At the end of your work session, before you close out Atom, you’ll need to <strong>push</strong> all of those commits to the remote branch on the web. You’ll see down in the bottom menu an item called <strong>publish</strong>. You’ll only see this the first time you push from a newly created branch; from now on when you commit changes on a branch that has already been published, you’ll see push.</li>
  <li>Once you click <strong>publish</strong> (or <strong>push</strong> after this first time), the changes you’ve made are sent to the <strong>firstname-month-date</strong> branch of the web repository. <strong>NB:</strong> You can make as many changes to multiple files as you like, and then wait and stage them all at the same time to commit and push. You shouldn’t push changes with every minor change you make–just makes more work for you and the GitHub server.</li>
</ol>

<p>Ok, you’ve made some changes to the about.md file and so has your partner.</p>
<h3 id="what-do-we-do-about-the-fact-that-youve-both-changed-the-same-file">What do we do about the fact that you’ve both changed the same file?</h3>

<p>This is where using GitHub is nice, because while one of you could override the other’s changes, there’s a process to ensure that doesn’t happen accidentally–that process is a pull request like what you’ve been doing all semester.</p>

<ol>
  <li>Once you feel like you’ve got your files exactly as you’d like them, you create a <strong>pull request</strong> to merge with the main branch of your repository. You don’t need to create a pull request every time you work on your files! You should wait until you’re happy with what you’ve done and feel like you need feedback from your partner before you create a pull request.</li>
  <li>Once you decide you’re ready, you go to github.com/HUM-331-Princeton/your-repository and you <strong>create a pull request</strong> that asks to merge your branch with the main branch. After you click <strong>Create pull request</strong>, on the page where you type in your explanation of the pull request, you’ll click the <strong>Reviewers</strong> menu to the right of the dialogue box and select your partner as a reviewer. That means your pull request cannot be merged until your partner has done a review of your changes.</li>
  <li>You can check out your partner’s pull requests and leave comments about changes made before Approving their changes so they can merge them:</li>
  <li>Open <strong>Pull Requests</strong> in the top menu of your repository, click <strong>Files Changed</strong> at the upper right.</li>
  <li>Deletions to the file are in red, additions in green.</li>
  <li>By clicking the green Review Changes button, you can leave a comment about those changes that the other person can see, like: “Looks good to me; go ahead and merge it!”</li>
  <li>Together, you can decide if you want to merge the changed branch to the main one. Once you do that, the personal branch you created will be merged into the main branch so it won’t exist anymore. You’ll create a new one the next time you work.</li>
</ol>

<h3 id="the-next-time-you-start-work-on-the-site-youll-want-to-be-sure-that-your-local-files-match-the-files-in-the-remote-repository">The next time you start work on the site you’ll want to be sure that your local files match the files in the remote repository.</h3>
<ol>
  <li>You use the <strong>Fetch</strong> command at the bottom right menu to ask Atom to update your local files with any changes that have been made to the remote branch.</li>
  <li>If there are changed files (and there should be after you merge pull requests), after you click <strong>Fetch</strong> you’ll see the menu become <strong>Pull</strong>. Click <strong>Pull</strong> to merge those changes into your repository.</li>
  <li>Once you’ve merged each other’s branches into the main repository, your branch that you named ‘firstname-month-date’ no longer exists in the remote repository, but it will still show up in Atom. Just ignore it. There’s a way to delete this branch locally using the command line, but unless it really bugs you, it isn’t a problem. (If it does bug you, I can tell you how to delete it locally–just ask me).</li>
  <li>Just be sure to create a <strong>New branch</strong> for your work following a merged pull request. You shouldn’t ever be working in the main branch. You can follow the same naming convention, just changing the date.</li>
</ol>
:ET